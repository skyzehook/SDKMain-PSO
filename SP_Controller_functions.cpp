#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SP_Controller

#include "Basic.hpp"

#include "SP_Controller_classes.hpp"
#include "SP_Controller_parameters.hpp"


namespace SDK
{

// Function SP_Controller.SP_Controller_C.ExecuteUbergraph_SP_Controller
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::ExecuteUbergraph_SP_Controller(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "ExecuteUbergraph_SP_Controller");

	Params::SP_Controller_C_ExecuteUbergraph_SP_Controller Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.ClientPrintString
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InString                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ASP_Controller_C::ClientPrintString(const class FString& InString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "ClientPrintString");

	Params::SP_Controller_C_ClientPrintString Parms{};

	Parms.InString = std::move(InString);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.SetMP_Freecam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_FreeCam_C*                    SpectatorPawnRef                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::SetMP_Freecam(class AMP_FreeCam_C* SpectatorPawnRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "SetMP_Freecam");

	Params::SP_Controller_C_SetMP_Freecam Parms{};

	Parms.SpectatorPawnRef = SpectatorPawnRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.SetSpectatorCharacter_Server
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_SpectatorCharacter_C*         Param_SpectatorCharacter                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::SetSpectatorCharacter_Server(class AMP_SpectatorCharacter_C* Param_SpectatorCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "SetSpectatorCharacter_Server");

	Params::SP_Controller_C_SetSpectatorCharacter_Server Parms{};

	Parms.Param_SpectatorCharacter = Param_SpectatorCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.SetSpectatorCharacter_Client
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_SpectatorCharacter_C*         Param_SpectatorCharacter                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::SetSpectatorCharacter_Client(class AMP_SpectatorCharacter_C* Param_SpectatorCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "SetSpectatorCharacter_Client");

	Params::SP_Controller_C_SetSpectatorCharacter_Client Parms{};

	Parms.Param_SpectatorCharacter = Param_SpectatorCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.SetSP_Character_Server
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Character_C*                  Param_SP_Character                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::SetSP_Character_Server(class ASP_Character_C* Param_SP_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "SetSP_Character_Server");

	Params::SP_Controller_C_SetSP_Character_Server Parms{};

	Parms.Param_SP_Character = Param_SP_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.SetSP_Character_Client
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Character_C*                  Param_SP_Character                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::SetSP_Character_Client(class ASP_Character_C* Param_SP_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "SetSP_Character_Client");

	Params::SP_Controller_C_SetSP_Character_Client Parms{};

	Parms.Param_SP_Character = Param_SP_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_CameraSettings_Client
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_Onest_Person_FOV                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_Threerd_Person_FOV                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_Threerd_Person_Distance                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_Threerd_Person_Height                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_BallIndicatorSize                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_GkNetTransparency                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Set_CameraSettings_Client(float Param_Onest_Person_FOV, float Param_Threerd_Person_FOV, float Param_Threerd_Person_Distance, float Param_Threerd_Person_Height, int32 Param_BallIndicatorSize, float Param_GkNetTransparency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_CameraSettings_Client");

	Params::SP_Controller_C_Set_CameraSettings_Client Parms{};

	Parms.Param_Onest_Person_FOV = Param_Onest_Person_FOV;
	Parms.Param_Threerd_Person_FOV = Param_Threerd_Person_FOV;
	Parms.Param_Threerd_Person_Distance = Param_Threerd_Person_Distance;
	Parms.Param_Threerd_Person_Height = Param_Threerd_Person_Height;
	Parms.Param_BallIndicatorSize = Param_BallIndicatorSize;
	Parms.Param_GkNetTransparency = Param_GkNetTransparency;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_GoalsOpacity
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   GoalOpacity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Set_GoalsOpacity(float GoalOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_GoalsOpacity");

	Params::SP_Controller_C_Set_GoalsOpacity Parms{};

	Parms.GoalOpacity = GoalOpacity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InitializePlayerServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PlayerSessionId                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FSP_PlayerAppearance             SP_PlayerAppearance                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InitializePlayerServer(const class FString& SteamID, const class FString& PlayerSessionId, const struct FSP_PlayerAppearance& SP_PlayerAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InitializePlayerServer");

	Params::SP_Controller_C_InitializePlayerServer Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.PlayerSessionId = std::move(PlayerSessionId);
	Parms.SP_PlayerAppearance = std::move(SP_PlayerAppearance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_OnlineSettings
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_ProfanityFilter                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_TextChatMode                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Set_OnlineSettings(bool Param_ProfanityFilter, int32 Param_TextChatMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_OnlineSettings");

	Params::SP_Controller_C_Set_OnlineSettings Parms{};

	Parms.Param_ProfanityFilter = Param_ProfanityFilter;
	Parms.Param_TextChatMode = Param_TextChatMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_CameraSettings
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_Onest_Person_FOV                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_Threerd_Person_FOV                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_Threerd_Person_Distance                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_Threerd_Person_Height                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_BallIndicatorSize                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_GkNetTransparency                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Set_CameraSettings(float Param_Onest_Person_FOV, float Param_Threerd_Person_FOV, float Param_Threerd_Person_Distance, float Param_Threerd_Person_Height, int32 Param_BallIndicatorSize, float Param_GkNetTransparency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_CameraSettings");

	Params::SP_Controller_C_Set_CameraSettings Parms{};

	Parms.Param_Onest_Person_FOV = Param_Onest_Person_FOV;
	Parms.Param_Threerd_Person_FOV = Param_Threerd_Person_FOV;
	Parms.Param_Threerd_Person_Distance = Param_Threerd_Person_Distance;
	Parms.Param_Threerd_Person_Height = Param_Threerd_Person_Height;
	Parms.Param_BallIndicatorSize = Param_BallIndicatorSize;
	Parms.Param_GkNetTransparency = Param_GkNetTransparency;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_ControlSettings
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InvertVertical                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InvertHorizontal                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LookSensitivity                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_HeightSensitivity                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurveSens                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_ToggleGkCatch                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_GkDiveButton                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Set_ControlSettings(bool InvertVertical, bool InvertHorizontal, float LookSensitivity, float Param_HeightSensitivity, float CurveSens, bool Param_ToggleGkCatch, int32 Param_GkDiveButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_ControlSettings");

	Params::SP_Controller_C_Set_ControlSettings Parms{};

	Parms.InvertVertical = InvertVertical;
	Parms.InvertHorizontal = InvertHorizontal;
	Parms.LookSensitivity = LookSensitivity;
	Parms.Param_HeightSensitivity = Param_HeightSensitivity;
	Parms.CurveSens = CurveSens;
	Parms.Param_ToggleGkCatch = Param_ToggleGkCatch;
	Parms.Param_GkDiveButton = Param_GkDiveButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.TaskbarFlash
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::TaskbarFlash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "TaskbarFlash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.Set_1stPersonOnly
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_OnestPersonOnly                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::Set_1stPersonOnly(bool Param_OnestPersonOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_1stPersonOnly");

	Params::SP_Controller_C_Set_1stPersonOnly Parms{};

	Parms.Param_OnestPersonOnly = Param_OnestPersonOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_Ballhalo
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASoccerBall_C*                    SoccerBall                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Set_Ballhalo(class ASoccerBall_C* SoccerBall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_Ballhalo");

	Params::SP_Controller_C_Set_Ballhalo Parms{};

	Parms.SoccerBall = SoccerBall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Update_CharacterCamera
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::Update_CharacterCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Update_CharacterCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.Set_BallIndicatorSize
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BallHaloSize                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Set_BallIndicatorSize(int32 BallHaloSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_BallIndicatorSize");

	Params::SP_Controller_C_Set_BallIndicatorSize Parms{};

	Parms.BallHaloSize = BallHaloSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_GkNetTransparency
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_GkNetTransparency                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Set_GkNetTransparency(float Param_GkNetTransparency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_GkNetTransparency");

	Params::SP_Controller_C_Set_GkNetTransparency Parms{};

	Parms.Param_GkNetTransparency = Param_GkNetTransparency;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.UpdateMatchBallIndicator
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::UpdateMatchBallIndicator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "UpdateMatchBallIndicator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.GetSpectatorCharacter
// (BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::GetSpectatorCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "GetSpectatorCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.InitializePlayerClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::InitializePlayerClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InitializePlayerClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.Set_1stPersonCamera_Server
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_OnestPersonCamera                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::Set_1stPersonCamera_Server(bool Param_OnestPersonCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_1stPersonCamera_Server");

	Params::SP_Controller_C_Set_1stPersonCamera_Server Parms{};

	Parms.Param_OnestPersonCamera = Param_OnestPersonCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_1stPersonCamera
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_OnestPersonCamera                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::Set_1stPersonCamera(bool Param_OnestPersonCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_1stPersonCamera");

	Params::SP_Controller_C_Set_1stPersonCamera Parms{};

	Parms.Param_OnestPersonCamera = Param_OnestPersonCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_PlayerAppearance
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSP_AppearanceCombined           SP_Appearance                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::Set_PlayerAppearance(const struct FSP_AppearanceCombined& SP_Appearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_PlayerAppearance");

	Params::SP_Controller_C_Set_PlayerAppearance Parms{};

	Parms.SP_Appearance = std::move(SP_Appearance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Start_AmbienceSound
// (BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::Start_AmbienceSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Start_AmbienceSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ASP_Controller_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.GkDive
// (BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::GkDive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "GkDive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.SetDiveCoolDown
// (BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::SetDiveCoolDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "SetDiveCoolDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.DisableGkCatchToggle
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_GkButtonPressed                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::DisableGkCatchToggle(bool Param_GkButtonPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "DisableGkCatchToggle");

	Params::SP_Controller_C_DisableGkCatchToggle Parms{};

	Parms.Param_GkButtonPressed = Param_GkButtonPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_GkButtonPressed
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_GkButtonPressed                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::Set_GkButtonPressed(bool Param_GkButtonPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_GkButtonPressed");

	Params::SP_Controller_C_Set_GkButtonPressed Parms{};

	Parms.Param_GkButtonPressed = Param_GkButtonPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_InputEnabled
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_InputEnabled                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::Set_InputEnabled(bool Param_InputEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_InputEnabled");

	Params::SP_Controller_C_Set_InputEnabled Parms{};

	Parms.Param_InputEnabled = Param_InputEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.CalculateSprint
// (BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::CalculateSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CalculateSprint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.Gk_StopMovement
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterMovementComponent*      CharacterMovementComponent                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Gk_StopMovement(class UCharacterMovementComponent* CharacterMovementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Gk_StopMovement");

	Params::SP_Controller_C_Gk_StopMovement Parms{};

	Parms.CharacterMovementComponent = CharacterMovementComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.CheckSprinting
// (BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::CheckSprinting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CheckSprinting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.Gk_EnterDiveMovement
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterMovementComponent*      CharacterMovementComponent                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Gk_EnterDiveMovement(class UCharacterMovementComponent* CharacterMovementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Gk_EnterDiveMovement");

	Params::SP_Controller_C_Gk_EnterDiveMovement Parms{};

	Parms.CharacterMovementComponent = CharacterMovementComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Gk_ExitDiveMovement
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterMovementComponent*      CharacterMovementComponent                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Gk_ExitDiveMovement(class UCharacterMovementComponent* CharacterMovementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Gk_ExitDiveMovement");

	Params::SP_Controller_C_Gk_ExitDiveMovement Parms{};

	Parms.CharacterMovementComponent = CharacterMovementComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Set_ControlRotation
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         NewRotation                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)

void ASP_Controller_C::Set_ControlRotation(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_ControlRotation");

	Params::SP_Controller_C_Set_ControlRotation Parms{};

	Parms.NewRotation = std::move(NewRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpAxisEvt_VerticalMovement_K2Node_InputAxisEvent_4
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::InpAxisEvt_VerticalMovement_K2Node_InputAxisEvent_4(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpAxisEvt_VerticalMovement_K2Node_InputAxisEvent_4");

	Params::SP_Controller_C_InpAxisEvt_VerticalMovement_K2Node_InputAxisEvent_4 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.EnterRun_Client
// (BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::EnterRun_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "EnterRun_Client");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.EnterSprint_Client
// (BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::EnterSprint_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "EnterSprint_Client");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.InpAxisEvt_HorizontalAim_K2Node_InputAxisEvent_3
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::InpAxisEvt_HorizontalAim_K2Node_InputAxisEvent_3(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpAxisEvt_HorizontalAim_K2Node_InputAxisEvent_3");

	Params::SP_Controller_C_InpAxisEvt_HorizontalAim_K2Node_InputAxisEvent_3 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpAxisEvt_VerticalAim_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::InpAxisEvt_VerticalAim_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpAxisEvt_VerticalAim_K2Node_InputAxisEvent_2");

	Params::SP_Controller_C_InpAxisEvt_VerticalAim_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.ResetKick
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::ResetKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "ResetKick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.Juggle
// (BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::Juggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Juggle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.Dribble
// (BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::Dribble()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Dribble");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.Kick
// (BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::Kick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Kick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.CL_Host_Set1stPersonOnly
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_OnestPersonOnly                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::CL_Host_Set1stPersonOnly(bool Param_OnestPersonOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_Set1stPersonOnly");

	Params::SP_Controller_C_CL_Host_Set1stPersonOnly Parms{};

	Parms.Param_OnestPersonOnly = Param_OnestPersonOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.CL_Host_BanPlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                Param_PlayerState                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::CL_Host_BanPlayer(class AMP_PlayerState_C* Param_PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_BanPlayer");

	Params::SP_Controller_C_CL_Host_BanPlayer Parms{};

	Parms.Param_PlayerState = Param_PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.CL_Host_SetAutoStart
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AutoStart                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::CL_Host_SetAutoStart(bool AutoStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_SetAutoStart");

	Params::SP_Controller_C_CL_Host_SetAutoStart Parms{};

	Parms.AutoStart = AutoStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.CL_Host_BenchAllPlayers
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::CL_Host_BenchAllPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_BenchAllPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.CL_Host_GiveHost
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::CL_Host_GiveHost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_GiveHost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.CL_Host_KickPlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                Param_PlayerState                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::CL_Host_KickPlayer(class AMP_PlayerState_C* Param_PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_KickPlayer");

	Params::SP_Controller_C_CL_Host_KickPlayer Parms{};

	Parms.Param_PlayerState = Param_PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.CL_Host_ForceSpectate
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                Param_PlayerState                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::CL_Host_ForceSpectate(class AMP_PlayerState_C* Param_PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_ForceSpectate");

	Params::SP_Controller_C_CL_Host_ForceSpectate Parms{};

	Parms.Param_PlayerState = Param_PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.RecieveKick
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::RecieveKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "RecieveKick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.CL_Host_SetOvertime
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OverTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::CL_Host_SetOvertime(bool OverTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_SetOvertime");

	Params::SP_Controller_C_CL_Host_SetOvertime Parms{};

	Parms.OverTime = OverTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.CL_Host_SetSingleKeeper
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SingleKeeper                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::CL_Host_SetSingleKeeper(bool SingleKeeper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_SetSingleKeeper");

	Params::SP_Controller_C_CL_Host_SetSingleKeeper Parms{};

	Parms.SingleKeeper = SingleKeeper;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.TR_StartTutorial
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TutorialType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ControllerMode_                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::TR_StartTutorial(int32 TutorialType, bool ControllerMode_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "TR_StartTutorial");

	Params::SP_Controller_C_TR_StartTutorial Parms{};

	Parms.TutorialType = TutorialType;
	Parms.ControllerMode_ = ControllerMode_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.CL_Host_ForceResetMatch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::CL_Host_ForceResetMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_ForceResetMatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.CL_Host_ForceStartMatch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::CL_Host_ForceStartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_ForceStartMatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.CL_Host_MatchLength-
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::CL_Host_MatchLengthMinus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_MatchLength-");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.CL_Host_MatchLength+
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::CL_Host_MatchLengthPlus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_MatchLength+");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.CL_Host_TeamSize-
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::CL_Host_TeamSizeMinus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_TeamSize-");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.CL_Host_TeamSize+
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::CL_Host_TeamSizePlus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CL_Host_TeamSize+");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.TR_StartFreePlay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::TR_StartFreePlay(int32 Team, int32 Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "TR_StartFreePlay");

	Params::SP_Controller_C_TR_StartFreePlay Parms{};

	Parms.Team = Team;
	Parms.Position = Position;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_SubstituteSpawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SendTeamChangeMessage_                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ASP_Controller_C::MP_SubstituteSpawn(int32 Team, int32 Position, bool SendTeamChangeMessage_, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_SubstituteSpawn");

	Params::SP_Controller_C_MP_SubstituteSpawn Parms{};

	Parms.Team = Team;
	Parms.Position = Position;
	Parms.SendTeamChangeMessage_ = SendTeamChangeMessage_;
	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_CheckSubstituteSpawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_CheckSubstituteSpawn(int32 Team, int32 Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_CheckSubstituteSpawn");

	Params::SP_Controller_C_MP_CheckSubstituteSpawn Parms{};

	Parms.Team = Team;
	Parms.Position = Position;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.CheckSpectatorRespawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::CheckSpectatorRespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CheckSpectatorRespawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.Set_SP_FreeCamera_Client
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_FreeCam_C*                    Param_MP_FreeCam                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Set_SP_FreeCamera_Client(class AMP_FreeCam_C* Param_MP_FreeCam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Set_SP_FreeCamera_Client");

	Params::SP_Controller_C_Set_SP_FreeCamera_Client Parms{};

	Parms.Param_MP_FreeCam = Param_MP_FreeCam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.Spawn_FreeCamera
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::Spawn_FreeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Spawn_FreeCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.Spawn_SpectatorCharacter
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MatchEndSpawn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    SendTeamChangeMessage                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    DontCloseMultiplayerMenu                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::Spawn_SpectatorCharacter(bool MatchEndSpawn, const struct FTransform& SpawnTransform, bool SendTeamChangeMessage, bool DontCloseMultiplayerMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Spawn_SpectatorCharacter");

	Params::SP_Controller_C_Spawn_SpectatorCharacter Parms{};

	Parms.MatchEndSpawn = MatchEndSpawn;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.SendTeamChangeMessage = SendTeamChangeMessage;
	Parms.DontCloseMultiplayerMenu = DontCloseMultiplayerMenu;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.RespawnSP_Character
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ASP_Controller_C::RespawnSP_Character(const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "RespawnSP_Character");

	Params::SP_Controller_C_RespawnSP_Character Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_CheckSpawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_CheckSpawn(int32 Team, int32 Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_CheckSpawn");

	Params::SP_Controller_C_MP_CheckSpawn Parms{};

	Parms.Team = Team;
	Parms.Position = Position;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.SpawnSP_Character
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SendTeamChangeMessage                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ASP_Controller_C::SpawnSP_Character(int32 Team, int32 Position, bool SendTeamChangeMessage, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "SpawnSP_Character");

	Params::SP_Controller_C_SpawnSP_Character Parms{};

	Parms.Team = Team;
	Parms.Position = Position;
	Parms.SendTeamChangeMessage = SendTeamChangeMessage;
	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_CPT-InitiateSwap
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           OnestSteamID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           TwondSteamID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   EmptyPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_CPTMinusInitiateSwap(const class FString& OnestSteamID, const class FString& TwondSteamID, int32 EmptyPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_CPT-InitiateSwap");

	Params::SP_Controller_C_MP_CPTMinusInitiateSwap Parms{};

	Parms.OnestSteamID = std::move(OnestSteamID);
	Parms.TwondSteamID = std::move(TwondSteamID);
	Parms.EmptyPosition = EmptyPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_CPT-KickPlayerFromTeam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_CPTMinusKickPlayerFromTeam(const class FString& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_CPT-KickPlayerFromTeam");

	Params::SP_Controller_C_MP_CPTMinusKickPlayerFromTeam Parms{};

	Parms.SteamID = std::move(SteamID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-SetRedCardLength
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RedCardLength                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HostMinusSetRedCardLength(int32 RedCardLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-SetRedCardLength");

	Params::SP_Controller_C_MP_HostMinusSetRedCardLength Parms{};

	Parms.RedCardLength = RedCardLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-SetCaptainRolesEnabled
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CaptainRolesAllowed                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::MP_HostMinusSetCaptainRolesEnabled(bool CaptainRolesAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-SetCaptainRolesEnabled");

	Params::SP_Controller_C_MP_HostMinusSetCaptainRolesEnabled Parms{};

	Parms.CaptainRolesAllowed = CaptainRolesAllowed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-SetCoachRolesEnabled
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CoachRolesAllowed                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::MP_HostMinusSetCoachRolesEnabled(bool CoachRolesAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-SetCoachRolesEnabled");

	Params::SP_Controller_C_MP_HostMinusSetCoachRolesEnabled Parms{};

	Parms.CoachRolesAllowed = CoachRolesAllowed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_CPT-SetSubstitutesSlots
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SubSlots                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_CPTMinusSetSubstitutesSlots(int32 SubSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_CPT-SetSubstitutesSlots");

	Params::SP_Controller_C_MP_CPTMinusSetSubstitutesSlots Parms{};

	Parms.SubSlots = SubSlots;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_RequestSwap
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerSessionId                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_RequestSwap(const class FString& PlayerSessionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_RequestSwap");

	Params::SP_Controller_C_MP_RequestSwap Parms{};

	Parms.PlayerSessionId = std::move(PlayerSessionId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_HUD-OpenMatchSummary
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::MP_HUDMinusOpenMatchSummary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_HUD-OpenMatchSummary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.MP_HUD-UpdateMatchSummary
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::MP_HUDMinusUpdateMatchSummary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_HUD-UpdateMatchSummary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.Coach
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CoachTeam                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::Coach(int32 CoachTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "Coach");

	Params::SP_Controller_C_Coach Parms{};

	Parms.CoachTeam = CoachTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.VoteNo
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::VoteNo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "VoteNo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.VoteYes
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::VoteYes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "VoteYes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.MP_CPT-ImportCustomTeam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTeamInfo                        TeamInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FSP_TeamAppearance               TeamAppearance                                         (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FSP_TeamAppearance               GkAppearance                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::MP_CPTMinusImportCustomTeam(const struct FTeamInfo& TeamInfo, const struct FSP_TeamAppearance& TeamAppearance, const struct FSP_TeamAppearance& GkAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_CPT-ImportCustomTeam");

	Params::SP_Controller_C_MP_CPTMinusImportCustomTeam Parms{};

	Parms.TeamInfo = std::move(TeamInfo);
	Parms.TeamAppearance = std::move(TeamAppearance);
	Parms.GkAppearance = std::move(GkAppearance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_CPT-SetFormation
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_CPTMinusSetFormation(int32 Selection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_CPT-SetFormation");

	Params::SP_Controller_C_MP_CPTMinusSetFormation Parms{};

	Parms.Selection = Selection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-GiveHost
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HostMinusGiveHost(class AMP_PlayerState_C* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-GiveHost");

	Params::SP_Controller_C_MP_HostMinusGiveHost Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-BanPlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                Param_MP_PlayerState                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HostMinusBanPlayer(class AMP_PlayerState_C* Param_MP_PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-BanPlayer");

	Params::SP_Controller_C_MP_HostMinusBanPlayer Parms{};

	Parms.Param_MP_PlayerState = Param_MP_PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-KickPlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HostMinusKickPlayer(class AMP_PlayerState_C* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-KickPlayer");

	Params::SP_Controller_C_MP_HostMinusKickPlayer Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-ForceSpectatePlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HostMinusForceSpectatePlayer(class AMP_PlayerState_C* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-ForceSpectatePlayer");

	Params::SP_Controller_C_MP_HostMinusForceSpectatePlayer Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-Set1stPersonOnly
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_OnestPersonOnly                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::MP_HostMinusSet1stPersonOnly(bool Param_OnestPersonOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-Set1stPersonOnly");

	Params::SP_Controller_C_MP_HostMinusSet1stPersonOnly Parms{};

	Parms.Param_OnestPersonOnly = Param_OnestPersonOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-SetSingleKeeper
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SingleKeeper                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::MP_HostMinusSetSingleKeeper(bool SingleKeeper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-SetSingleKeeper");

	Params::SP_Controller_C_MP_HostMinusSetSingleKeeper Parms{};

	Parms.SingleKeeper = SingleKeeper;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-SetAuto-Start
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AutoStart                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Controller_C::MP_HostMinusSetAutoMinusStart(bool AutoStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-SetAuto-Start");

	Params::SP_Controller_C_MP_HostMinusSetAutoMinusStart Parms{};

	Parms.AutoStart = AutoStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-SetOvertimeMode
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OvertimeMode                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HostMinusSetOvertimeMode(int32 OvertimeMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-SetOvertimeMode");

	Params::SP_Controller_C_MP_HostMinusSetOvertimeMode Parms{};

	Parms.OvertimeMode = OvertimeMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_HUD-SendPlayerMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MessageGroup                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HUDMinusSendPlayerMessage(const class FString& MessageGroup, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_HUD-SendPlayerMessage");

	Params::SP_Controller_C_MP_HUDMinusSendPlayerMessage Parms{};

	Parms.MessageGroup = std::move(MessageGroup);
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_HUD-RecieveChatMessage
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MessageType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SenderSteamID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MessageGroup                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           SwappingPlayerName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SwappingPlayerTeam                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SwappingPlayerPosition                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HUDMinusRecieveChatMessage(int32 MessageType, const class FString& SenderSteamID, int32 Team, const class FString& MessageGroup, const class FString& PlayerName, int32 Position, const class FString& Message, const class FString& SwappingPlayerName, int32 SwappingPlayerTeam, int32 SwappingPlayerPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_HUD-RecieveChatMessage");

	Params::SP_Controller_C_MP_HUDMinusRecieveChatMessage Parms{};

	Parms.MessageType = MessageType;
	Parms.SenderSteamID = std::move(SenderSteamID);
	Parms.Team = Team;
	Parms.MessageGroup = std::move(MessageGroup);
	Parms.PlayerName = std::move(PlayerName);
	Parms.Position = Position;
	Parms.Message = std::move(Message);
	Parms.SwappingPlayerName = std::move(SwappingPlayerName);
	Parms.SwappingPlayerTeam = SwappingPlayerTeam;
	Parms.SwappingPlayerPosition = SwappingPlayerPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.UnmutePlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::UnmutePlayer(class AMP_PlayerState_C* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "UnmutePlayer");

	Params::SP_Controller_C_UnmutePlayer Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-ForceAllSpectate
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::MP_HostMinusForceAllSpectate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-ForceAllSpectate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.MP_Host-SetMatchLength
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MatchLength                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HostMinusSetMatchLength(int32 MatchLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-SetMatchLength");

	Params::SP_Controller_C_MP_HostMinusSetMatchLength Parms{};

	Parms.MatchLength = MatchLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-SetTeamSize
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamSize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HostMinusSetTeamSize(int32 TeamSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-SetTeamSize");

	Params::SP_Controller_C_MP_HostMinusSetTeamSize Parms{};

	Parms.TeamSize = TeamSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_Host-ForceResetMatch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::MP_HostMinusForceResetMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-ForceResetMatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.MP_Host-ForceStartMatch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::MP_HostMinusForceStartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_Host-ForceStartMatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.MP_HUD-GoalStateFadeIn
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WithAssist_                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             TeamScoreText                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FLinearColor                     TeamScoreTextColor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ScorerName                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             AssisterName                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void ASP_Controller_C::MP_HUDMinusGoalStateFadeIn(bool WithAssist_, const class FText& TeamScoreText, const struct FLinearColor& TeamScoreTextColor, const class FText& ScorerName, const class FText& AssisterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_HUD-GoalStateFadeIn");

	Params::SP_Controller_C_MP_HUDMinusGoalStateFadeIn Parms{};

	Parms.WithAssist_ = WithAssist_;
	Parms.TeamScoreText = std::move(TeamScoreText);
	Parms.TeamScoreTextColor = std::move(TeamScoreTextColor);
	Parms.ScorerName = std::move(ScorerName);
	Parms.AssisterName = std::move(AssisterName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_HUD-SetMatchTime
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MatchMinutes                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MatchSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HUDMinusSetMatchTime(int32 MatchMinutes, float MatchSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_HUD-SetMatchTime");

	Params::SP_Controller_C_MP_HUDMinusSetMatchTime Parms{};

	Parms.MatchMinutes = MatchMinutes;
	Parms.MatchSeconds = MatchSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_HUD-MatchStateFadeOut
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::MP_HUDMinusMatchStateFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_HUD-MatchStateFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.MP_HUD-MatchStateFadeIn
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             MatchStateText                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FLinearColor                     TextColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HUDMinusMatchStateFadeIn(const class FText& MatchStateText, const struct FLinearColor& TextColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_HUD-MatchStateFadeIn");

	Params::SP_Controller_C_MP_HUDMinusMatchStateFadeIn Parms{};

	Parms.MatchStateText = std::move(MatchStateText);
	Parms.TextColor = std::move(TextColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_HUD-MatchStateSetText
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             MatchStateText                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FLinearColor                     TextColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Controller_C::MP_HUDMinusMatchStateSetText(const class FText& MatchStateText, const struct FLinearColor& TextColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_HUD-MatchStateSetText");

	Params::SP_Controller_C_MP_HUDMinusMatchStateSetText Parms{};

	Parms.MatchStateText = std::move(MatchStateText);
	Parms.TextColor = std::move(TextColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.MP_HUD-CloseMatchMenu
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::MP_HUDMinusCloseMatchMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_HUD-CloseMatchMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.MP_HUD-OpenMatchMenu
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::MP_HUDMinusOpenMatchMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "MP_HUD-OpenMatchMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_AnyKey_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_AnyKey_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_AnyKey_K2Node_InputActionEvent_0");

	Params::SP_Controller_C_InpActEvt_AnyKey_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Emotes_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Emotes_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Emotes_K2Node_InputActionEvent_1");

	Params::SP_Controller_C_InpActEvt_Emotes_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Emotes_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Emotes_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Emotes_K2Node_InputActionEvent_2");

	Params::SP_Controller_C_InpActEvt_Emotes_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_QuickChat4_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_QuickChat4_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_QuickChat4_K2Node_InputActionEvent_3");

	Params::SP_Controller_C_InpActEvt_QuickChat4_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_QuickChat3_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_QuickChat3_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_QuickChat3_K2Node_InputActionEvent_4");

	Params::SP_Controller_C_InpActEvt_QuickChat3_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_QuickChat2_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_QuickChat2_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_QuickChat2_K2Node_InputActionEvent_5");

	Params::SP_Controller_C_InpActEvt_QuickChat2_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_QuickChat1_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_QuickChat1_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_QuickChat1_K2Node_InputActionEvent_6");

	Params::SP_Controller_C_InpActEvt_QuickChat1_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_ToggleCamera_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_ToggleCamera_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_ToggleCamera_K2Node_InputActionEvent_7");

	Params::SP_Controller_C_InpActEvt_ToggleCamera_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Tab_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Tab_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Tab_K2Node_InputActionEvent_8");

	Params::SP_Controller_C_InpActEvt_Tab_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Escape_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Escape_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Escape_K2Node_InputActionEvent_9");

	Params::SP_Controller_C_InpActEvt_Escape_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0");

	Params::SP_Controller_C_InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1");

	Params::SP_Controller_C_InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_GkButton_K2Node_InputActionEvent_10
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_GkButton_K2Node_InputActionEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_GkButton_K2Node_InputActionEvent_10");

	Params::SP_Controller_C_InpActEvt_GkButton_K2Node_InputActionEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_GkButton_K2Node_InputActionEvent_11
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_GkButton_K2Node_InputActionEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_GkButton_K2Node_InputActionEvent_11");

	Params::SP_Controller_C_InpActEvt_GkButton_K2Node_InputActionEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.BicycleKick_K2Node_InputActionEvent_12
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::BicycleKick_K2Node_InputActionEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "BicycleKick_K2Node_InputActionEvent_12");

	Params::SP_Controller_C_BicycleKick_K2Node_InputActionEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.BicycleKick_K2Node_InputActionEvent_13
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::BicycleKick_K2Node_InputActionEvent_13(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "BicycleKick_K2Node_InputActionEvent_13");

	Params::SP_Controller_C_BicycleKick_K2Node_InputActionEvent_13 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Jump_K2Node_InputActionEvent_14
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Jump_K2Node_InputActionEvent_14(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Jump_K2Node_InputActionEvent_14");

	Params::SP_Controller_C_InpActEvt_Jump_K2Node_InputActionEvent_14 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Jump_K2Node_InputActionEvent_15
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Jump_K2Node_InputActionEvent_15(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Jump_K2Node_InputActionEvent_15");

	Params::SP_Controller_C_InpActEvt_Jump_K2Node_InputActionEvent_15 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Sprint_K2Node_InputActionEvent_16
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Sprint_K2Node_InputActionEvent_16(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Sprint_K2Node_InputActionEvent_16");

	Params::SP_Controller_C_InpActEvt_Sprint_K2Node_InputActionEvent_16 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Sprint_K2Node_InputActionEvent_17
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Sprint_K2Node_InputActionEvent_17(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Sprint_K2Node_InputActionEvent_17");

	Params::SP_Controller_C_InpActEvt_Sprint_K2Node_InputActionEvent_17 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_SpawnBall_K2Node_InputActionEvent_18
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_SpawnBall_K2Node_InputActionEvent_18(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_SpawnBall_K2Node_InputActionEvent_18");

	Params::SP_Controller_C_InpActEvt_SpawnBall_K2Node_InputActionEvent_18 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Juggle_K2Node_InputActionEvent_19
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Juggle_K2Node_InputActionEvent_19(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Juggle_K2Node_InputActionEvent_19");

	Params::SP_Controller_C_InpActEvt_Juggle_K2Node_InputActionEvent_19 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Juggle_K2Node_InputActionEvent_20
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Juggle_K2Node_InputActionEvent_20(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Juggle_K2Node_InputActionEvent_20");

	Params::SP_Controller_C_InpActEvt_Juggle_K2Node_InputActionEvent_20 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Dribble_K2Node_InputActionEvent_21
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Dribble_K2Node_InputActionEvent_21(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Dribble_K2Node_InputActionEvent_21");

	Params::SP_Controller_C_InpActEvt_Dribble_K2Node_InputActionEvent_21 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Dribble_K2Node_InputActionEvent_22
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Dribble_K2Node_InputActionEvent_22(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Dribble_K2Node_InputActionEvent_22");

	Params::SP_Controller_C_InpActEvt_Dribble_K2Node_InputActionEvent_22 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Kick_K2Node_InputActionEvent_23
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Kick_K2Node_InputActionEvent_23(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Kick_K2Node_InputActionEvent_23");

	Params::SP_Controller_C_InpActEvt_Kick_K2Node_InputActionEvent_23 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_Kick_K2Node_InputActionEvent_24
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_Kick_K2Node_InputActionEvent_24(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_Kick_K2Node_InputActionEvent_24");

	Params::SP_Controller_C_InpActEvt_Kick_K2Node_InputActionEvent_24 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_F2_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_F2_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_F2_K2Node_InputKeyEvent_2");

	Params::SP_Controller_C_InpActEvt_F2_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_F1_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_F1_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_F1_K2Node_InputKeyEvent_3");

	Params::SP_Controller_C_InpActEvt_F1_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_AllChat_K2Node_InputActionEvent_25
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_AllChat_K2Node_InputActionEvent_25(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_AllChat_K2Node_InputActionEvent_25");

	Params::SP_Controller_C_InpActEvt_AllChat_K2Node_InputActionEvent_25 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.InpActEvt_TeamChat_K2Node_InputActionEvent_26
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Controller_C::InpActEvt_TeamChat_K2Node_InputActionEvent_26(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "InpActEvt_TeamChat_K2Node_InputActionEvent_26");

	Params::SP_Controller_C_InpActEvt_TeamChat_K2Node_InputActionEvent_26 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Controller.SP_Controller_C.JugglePowerTimeline__UpdateFunc
// (BlueprintEvent)

void ASP_Controller_C::JugglePowerTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "JugglePowerTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.JugglePowerTimeline__FinishedFunc
// (BlueprintEvent)

void ASP_Controller_C::JugglePowerTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "JugglePowerTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.DribblePowerTimeline__UpdateFunc
// (BlueprintEvent)

void ASP_Controller_C::DribblePowerTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "DribblePowerTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.DribblePowerTimeline__FinishedFunc
// (BlueprintEvent)

void ASP_Controller_C::DribblePowerTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "DribblePowerTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.KickPowerTimeline__UpdateFunc
// (BlueprintEvent)

void ASP_Controller_C::KickPowerTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "KickPowerTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.KickPowerTimeline__FinishedFunc
// (BlueprintEvent)

void ASP_Controller_C::KickPowerTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "KickPowerTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.AfkTimer
// (Public, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::AfkTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "AfkTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.LongAfkTimer
// (Public, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::LongAfkTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "LongAfkTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.VeryLongAfkTimer
// (Public, BlueprintCallable, BlueprintEvent)

void ASP_Controller_C::VeryLongAfkTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "VeryLongAfkTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Controller.SP_Controller_C.CalculateTeamAppearance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSP_PlayerAppearance             SP_PlayerAppearance                                    (Parm, OutParm, HasGetValueTypeHash)
// struct FSP_TeamAppearance               TeamAppearance                                         (Parm, OutParm, HasGetValueTypeHash)

void ASP_Controller_C::CalculateTeamAppearance(int32 Team, int32 Position, struct FSP_PlayerAppearance* SP_PlayerAppearance, struct FSP_TeamAppearance* TeamAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Controller_C", "CalculateTeamAppearance");

	Params::SP_Controller_C_CalculateTeamAppearance Parms{};

	Parms.Team = Team;
	Parms.Position = Position;

	UObject::ProcessEvent(Func, &Parms);

	if (SP_PlayerAppearance != nullptr)
		*SP_PlayerAppearance = std::move(Parms.SP_PlayerAppearance);

	if (TeamAppearance != nullptr)
		*TeamAppearance = std::move(Parms.TeamAppearance);
}

}

